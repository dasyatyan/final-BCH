{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\nimport { BaseWalletAdapter, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet) {\n  return 'standard:connect' in wallet.features && 'standard:events' in wallet.features && ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features);\n}\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n  constructor({\n    wallet\n  }) {\n    super();\n    _StandardWalletAdapter_instances.add(this);\n    _StandardWalletAdapter_account.set(this, void 0);\n    _StandardWalletAdapter_publicKey.set(this, void 0);\n    _StandardWalletAdapter_connecting.set(this, void 0);\n    _StandardWalletAdapter_off.set(this, void 0);\n    _StandardWalletAdapter_wallet.set(this, void 0);\n    _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n    _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n    _StandardWalletAdapter_changed.set(this, properties => {\n      // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties)) return;\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      // If there's no connected account, disconnect the adapter.\n      if (!account) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n        return;\n      }\n      // If the account hasn't actually changed, do nothing.\n      if (account === __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")) return;\n      let publicKey;\n      // If the account public key isn't valid, disconnect the adapter.\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletPublicKeyError(error?.message));\n        this.emit('disconnect');\n        return;\n      }\n      // Change the adapter's account and public key and emit an event.\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    });\n    __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n    const supportedTransactionVersions = 'solana:signAndSendTransaction' in wallet.features ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n    __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n  }\n  get supportedTransactionVersions() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n  }\n  get url() {\n    return 'https://github.com/wallet-standard';\n  }\n  get publicKey() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n  }\n  get connecting() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n  }\n  get readyState() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n  }\n  get wallet() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n  }\n  get standard() {\n    return true;\n  }\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed) throw new WalletNotReadyError();\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n        try {\n          await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:connect'].connect();\n        } catch (error) {\n          throw new WalletConnectionError(error?.message, error);\n        }\n      }\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) throw new WalletAccountError();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      let publicKey;\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        throw new WalletPublicKeyError(error?.message, error);\n      }\n      __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:events'].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    }\n  }\n  async disconnect() {\n    if ('standard:disconnect' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n      try {\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:disconnect'].disconnect();\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error?.message, error));\n      }\n    }\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n    this.emit('disconnect');\n  }\n  async sendTransaction(transaction, connection, options = {}) {\n    try {\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n      if (!account) throw new WalletNotConnectedError();\n      let feature;\n      if ('solana:signAndSendTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (account.features.includes('solana:signAndSendTransaction')) {\n          feature = 'solana:signAndSendTransaction';\n        } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes('solana:signTransaction')) {\n          feature = 'solana:signTransaction';\n        } else {\n          throw new WalletAccountError();\n        }\n      } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n        feature = 'solana:signTransaction';\n      } else {\n        throw new WalletConfigError();\n      }\n      const chain = getChainForEndpoint(connection.rpcEndpoint);\n      if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n      try {\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        let serializedTransaction;\n        if (isVersionedTransaction(transaction)) {\n          signers?.length && transaction.sign(signers);\n          serializedTransaction = transaction.serialize();\n        } else {\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          signers?.length && transaction.partialSign(...signers);\n          serializedTransaction = new Uint8Array(transaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n        }\n        if (feature === 'solana:signAndSendTransaction') {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signAndSendTransaction'].signAndSendTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              skipPreflight: sendOptions.skipPreflight,\n              maxRetries: sendOptions.maxRetries,\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return bs58.encode(output.signature);\n        } else {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return await connection.sendRawTransaction(output.signedTransaction, {\n            ...sendOptions,\n            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n          });\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletSendTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n  if (account?.features.includes('solana:signTransaction')) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n  if (account?.features.includes('solana:signMessage')) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n  if (off) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n    off();\n  }\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const serializedTransaction = signedTransactions[0].signedTransaction;\n      return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction);\n    } catch (error) {\n      if (error instanceof WalletError) throw error;\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletSignTransactionError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction(...transactions.map(transaction => ({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      })));\n      return transactions.map((transaction, index) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const signedTransaction = signedTransactions[index].signedTransaction;\n        return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n      });\n    } catch (error) {\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signMessage' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signMessage')) throw new WalletSignMessageError();\n    try {\n      const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signMessage'].signMessage({\n        account,\n        message\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return signedMessages[0].signature;\n    } catch (error) {\n      throw new WalletSignMessageError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BaseWalletAdapter","WalletAccountError","WalletConfigError","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletError","WalletNotConnectedError","WalletNotReadyError","WalletPublicKeyError","WalletReadyState","WalletSendTransactionError","WalletSignMessageError","WalletSignTransactionError","getChainForEndpoint","getCommitment","PublicKey","Transaction","VersionedTransaction","arraysEqual","bs58","isVersionedTransaction","isWalletAdapterCompatibleWallet","wallet","features","StandardWalletAdapter","constructor","_StandardWalletAdapter_account","set","_StandardWalletAdapter_publicKey","_StandardWalletAdapter_connecting","_StandardWalletAdapter_off","_StandardWalletAdapter_wallet","_StandardWalletAdapter_supportedTransactionVersions","_StandardWalletAdapter_readyState","window","document","Unsupported","Installed","_StandardWalletAdapter_changed","properties","__classPrivateFieldGet","account","accounts","_StandardWalletAdapter_instances","_StandardWalletAdapter_disconnected","call","emit","publicKey","error","message","_StandardWalletAdapter_connected","__classPrivateFieldSet","supportedTransactionVersions","Set","name","icon","url","connecting","readyState","standard","connect","connected","length","on","disconnect","sendTransaction","transaction","connection","options","feature","includes","chain","rpcEndpoint","chains","signers","sendOptions","serializedTransaction","sign","serialize","prepareTransaction","partialSign","Uint8Array","requireAllSignatures","verifySignatures","output","signAndSendTransaction","preflightCommitment","commitment","skipPreflight","maxRetries","minContextSlot","encode","signature","signTransaction","sendRawTransaction","signedTransaction","_StandardWalletAdapter_signTransaction","signAllTransactions","_StandardWalletAdapter_signAllTransactions","signMessage","_StandardWalletAdapter_signMessage","off","undefined","signedTransactions","deserialize","from","transactions","map","index","signedMessages"],"sources":["C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@solana\\wallet-standard-wallet-adapter-base\\src\\adapter.ts"],"sourcesContent":["import type {\n    SendTransactionOptions,\n    SupportedTransactionVersions,\n    WalletAdapter,\n    WalletName,\n} from '@solana/wallet-adapter-base';\nimport {\n    BaseWalletAdapter,\n    WalletAccountError,\n    WalletConfigError,\n    WalletConnectionError,\n    WalletDisconnectedError,\n    WalletDisconnectionError,\n    WalletError,\n    WalletNotConnectedError,\n    WalletNotReadyError,\n    WalletPublicKeyError,\n    WalletReadyState,\n    WalletSendTransactionError,\n    WalletSignMessageError,\n    WalletSignTransactionError,\n} from '@solana/wallet-adapter-base';\nimport type {\n    SolanaSignAndSendTransactionFeature,\n    SolanaSignMessageFeature,\n    SolanaSignTransactionFeature,\n} from '@solana/wallet-standard-features';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport type { Connection, TransactionSignature } from '@solana/web3.js';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\nimport type { ConnectFeature, DisconnectFeature, EventsFeature, EventsListeners } from '@wallet-standard/features';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n\n/** TODO: docs */\nexport type WalletAdapterCompatibleWallet = WalletWithFeatures<\n    ConnectFeature &\n        EventsFeature &\n        (SolanaSignAndSendTransactionFeature | SolanaSignTransactionFeature) &\n        (DisconnectFeature | SolanaSignMessageFeature | never)\n>;\n\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet: Wallet): wallet is WalletAdapterCompatibleWallet {\n    return (\n        'standard:connect' in wallet.features &&\n        'standard:events' in wallet.features &&\n        ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features)\n    );\n}\n\n/** TODO: docs */\nexport interface StandardWalletAdapterConfig {\n    wallet: WalletAdapterCompatibleWallet;\n}\n\n/** TODO: docs */\nexport type StandardAdapter = WalletAdapter & {\n    wallet: WalletAdapterCompatibleWallet;\n    standard: true;\n};\n\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter implements StandardAdapter {\n    #account: WalletAccount | null;\n    #publicKey: PublicKey | null;\n    #connecting: boolean;\n    #off: (() => void) | undefined;\n    readonly #wallet: WalletAdapterCompatibleWallet;\n    readonly #supportedTransactionVersions: SupportedTransactionVersions;\n    readonly #readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.Installed;\n\n    get supportedTransactionVersions() {\n        return this.#supportedTransactionVersions;\n    }\n\n    get name() {\n        return this.#wallet.name as WalletName;\n    }\n\n    get icon() {\n        return this.#wallet.icon;\n    }\n\n    get url() {\n        return 'https://github.com/wallet-standard';\n    }\n\n    get publicKey() {\n        return this.#publicKey;\n    }\n\n    get connecting() {\n        return this.#connecting;\n    }\n\n    get readyState() {\n        return this.#readyState;\n    }\n\n    get wallet(): WalletAdapterCompatibleWallet {\n        return this.#wallet;\n    }\n\n    get standard() {\n        return true as const;\n    }\n\n    constructor({ wallet }: StandardWalletAdapterConfig) {\n        super();\n        this.#wallet = wallet;\n\n        const supportedTransactionVersions =\n            'solana:signAndSendTransaction' in wallet.features\n                ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions\n                : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n        this.#supportedTransactionVersions = arraysEqual(supportedTransactionVersions, ['legacy'])\n            ? null\n            : new Set(supportedTransactionVersions);\n\n        this.#account = null;\n        this.#publicKey = null;\n        this.#connecting = false;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (this.connected || this.connecting) return;\n            if (this.#readyState !== WalletReadyState.Installed) throw new WalletNotReadyError();\n\n            this.#connecting = true;\n\n            if (!this.#wallet.accounts.length) {\n                try {\n                    await this.#wallet.features['standard:connect'].connect();\n                } catch (error: any) {\n                    throw new WalletConnectionError(error?.message, error);\n                }\n            }\n\n            if (!this.#wallet.accounts.length) throw new WalletAccountError();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const account = this.#wallet.accounts[0]!;\n\n            let publicKey: PublicKey;\n            try {\n                publicKey = new PublicKey(account.publicKey);\n            } catch (error: any) {\n                throw new WalletPublicKeyError(error?.message, error);\n            }\n\n            this.#off = this.#wallet.features['standard:events'].on('change', this.#changed);\n            this.#connected(account, publicKey);\n            this.emit('connect', publicKey);\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        } finally {\n            this.#connecting = false;\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        if ('standard:disconnect' in this.#wallet.features) {\n            try {\n                await this.#wallet.features['standard:disconnect'].disconnect();\n            } catch (error: any) {\n                this.emit('error', new WalletDisconnectionError(error?.message, error));\n            }\n        }\n\n        this.#disconnected();\n        this.emit('disconnect');\n    }\n\n    #connected(account: WalletAccount, publicKey: PublicKey): void;\n    #connected(account: null, publicKey: null): void;\n    #connected(account: WalletAccount | null, publicKey: PublicKey | null) {\n        this.#account = account;\n        this.#publicKey = publicKey;\n\n        if (account?.features.includes('solana:signTransaction')) {\n            this.signTransaction = this.#signTransaction;\n            this.signAllTransactions = this.#signAllTransactions;\n        } else {\n            delete this.signTransaction;\n            delete this.signAllTransactions;\n        }\n\n        if (account?.features.includes('solana:signMessage')) {\n            this.signMessage = this.#signMessage;\n        } else {\n            delete this.signMessage;\n        }\n    }\n\n    #disconnected(): void {\n        const off = this.#off;\n        if (off) {\n            this.#off = undefined;\n            off();\n        }\n\n        this.#connected(null, null);\n    }\n\n    #changed: EventsListeners['change'] = (properties) => {\n        // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n        if (!this.#account || !this.#publicKey || !('accounts' in properties)) return;\n\n        const account = this.#wallet.accounts[0];\n        // If there's no connected account, disconnect the adapter.\n        if (!account) {\n            this.#disconnected();\n            this.emit('error', new WalletDisconnectedError());\n            this.emit('disconnect');\n            return;\n        }\n\n        // If the account hasn't actually changed, do nothing.\n        if (account === this.#account) return;\n\n        let publicKey: PublicKey;\n        // If the account public key isn't valid, disconnect the adapter.\n        try {\n            publicKey = new PublicKey(account.publicKey);\n        } catch (error: any) {\n            this.#disconnected();\n            this.emit('error', new WalletPublicKeyError(error?.message));\n            this.emit('disconnect');\n            return;\n        }\n\n        // Change the adapter's account and public key and emit an event.\n        this.#connected(account, publicKey);\n        this.emit('connect', publicKey);\n    };\n\n    async sendTransaction<T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        connection: Connection,\n        options: SendTransactionOptions = {}\n    ): Promise<TransactionSignature> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            let feature: 'solana:signAndSendTransaction' | 'solana:signTransaction';\n            if ('solana:signAndSendTransaction' in this.#wallet.features) {\n                if (account.features.includes('solana:signAndSendTransaction')) {\n                    feature = 'solana:signAndSendTransaction';\n                } else if (\n                    'solana:signTransaction' in this.#wallet.features &&\n                    account.features.includes('solana:signTransaction')\n                ) {\n                    feature = 'solana:signTransaction';\n                } else {\n                    throw new WalletAccountError();\n                }\n            } else if ('solana:signTransaction' in this.#wallet.features) {\n                if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n                feature = 'solana:signTransaction';\n            } else {\n                throw new WalletConfigError();\n            }\n\n            const chain = getChainForEndpoint(connection.rpcEndpoint);\n            if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n\n            try {\n                const { signers, ...sendOptions } = options;\n\n                let serializedTransaction: Uint8Array;\n                if (isVersionedTransaction(transaction)) {\n                    signers?.length && transaction.sign(signers);\n                    serializedTransaction = transaction.serialize();\n                } else {\n                    transaction = (await this.prepareTransaction(transaction, connection, sendOptions)) as T;\n                    signers?.length && (transaction as Transaction).partialSign(...signers);\n                    serializedTransaction = new Uint8Array(\n                        (transaction as Transaction).serialize({\n                            requireAllSignatures: false,\n                            verifySignatures: false,\n                        })\n                    );\n                }\n\n                if (feature === 'solana:signAndSendTransaction') {\n                    const [output] = await (this.#wallet.features as SolanaSignAndSendTransactionFeature)[\n                        'solana:signAndSendTransaction'\n                    ].signAndSendTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            skipPreflight: sendOptions.skipPreflight,\n                            maxRetries: sendOptions.maxRetries,\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return bs58.encode(output!.signature);\n                } else {\n                    const [output] = await (this.#wallet.features as SolanaSignTransactionFeature)[\n                        'solana:signTransaction'\n                    ].signTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return await connection.sendRawTransaction(output!.signedTransaction, {\n                        ...sendOptions,\n                        preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    });\n                }\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signTransaction: (<T extends Transaction | VersionedTransaction>(transaction: T) => Promise<T>) | undefined;\n    async #signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signTransaction' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n\n            try {\n                const signedTransactions = await this.#wallet.features['solana:signTransaction'].signTransaction({\n                    account,\n                    transaction: isVersionedTransaction(transaction)\n                        ? transaction.serialize()\n                        : new Uint8Array(\n                              transaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          ),\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const serializedTransaction = signedTransactions[0]!.signedTransaction;\n\n                return (\n                    isVersionedTransaction(transaction)\n                        ? VersionedTransaction.deserialize(serializedTransaction)\n                        : Transaction.from(serializedTransaction)\n                ) as T;\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signAllTransactions: (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>) | undefined;\n    async #signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<T[]> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signTransaction' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signTransaction')) throw new WalletSignTransactionError();\n\n            try {\n                const signedTransactions = await this.#wallet.features['solana:signTransaction'].signTransaction(\n                    ...transactions.map((transaction) => ({\n                        account,\n                        transaction: isVersionedTransaction(transaction)\n                            ? transaction.serialize()\n                            : new Uint8Array(\n                                  transaction.serialize({\n                                      requireAllSignatures: false,\n                                      verifySignatures: false,\n                                  })\n                              ),\n                    }))\n                );\n\n                return transactions.map((transaction, index) => {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const signedTransaction = signedTransactions[index]!.signedTransaction;\n\n                    return (\n                        isVersionedTransaction(transaction)\n                            ? VersionedTransaction.deserialize(signedTransaction)\n                            : Transaction.from(signedTransaction)\n                    ) as T;\n                });\n            } catch (error: any) {\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signMessage: ((message: Uint8Array) => Promise<Uint8Array>) | undefined;\n    async #signMessage(message: Uint8Array): Promise<Uint8Array> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signMessage' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signMessage')) throw new WalletSignMessageError();\n\n            try {\n                const signedMessages = await this.#wallet.features['solana:signMessage'].signMessage({\n                    account,\n                    message,\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return signedMessages[0]!.signature;\n            } catch (error: any) {\n                throw new WalletSignMessageError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}