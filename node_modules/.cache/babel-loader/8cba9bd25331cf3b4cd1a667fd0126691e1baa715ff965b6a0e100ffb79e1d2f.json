{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar QUOTA = 65536;\nvar BrowserRandomSource = /** @class */function () {\n  function BrowserRandomSource() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n    var browserCrypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto // IE11 has msCrypto\n    : null;\n    if (browserCrypto && browserCrypto.getRandomValues) {\n      this._crypto = browserCrypto;\n      this.isAvailable = true;\n      this.isInstantiated = true;\n    }\n  }\n  BrowserRandomSource.prototype.randomBytes = function (length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Browser random byte generator is not available.\");\n    }\n    var out = new Uint8Array(length);\n    for (var i = 0; i < out.length; i += QUOTA) {\n      this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n    }\n    return out;\n  };\n  return BrowserRandomSource;\n}();\nexports.BrowserRandomSource = BrowserRandomSource;","map":{"version":3,"names":["QUOTA","BrowserRandomSource","isAvailable","isInstantiated","browserCrypto","self","crypto","msCrypto","getRandomValues","_crypto","prototype","randomBytes","length","Error","out","Uint8Array","i","subarray","Math","min","exports"],"sources":["C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@walletconnect\\utils\\node_modules\\@stablelib\\random\\source\\browser.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\n\nconst QUOTA = 65536;\n\nexport class BrowserRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto?: { getRandomValues: typeof window.crypto.getRandomValues };\n\n    constructor() {\n        const browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || (self as { msCrypto?: any }).msCrypto) // IE11 has msCrypto\n            : null;\n\n        if (browserCrypto && browserCrypto.getRandomValues) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\n"],"mappings":";;AAAA;AACA;;;;AAIA,IAAMA,KAAK,GAAG,KAAK;AAEnB,IAAAC,mBAAA;EAMI,SAAAA,oBAAA;IALA,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,cAAc,GAAG,KAAK;IAKlB,IAAMC,aAAa,GAAG,OAAOC,IAAI,KAAK,WAAW,GAC1CA,IAAI,CAACC,MAAM,IAAKD,IAA2B,CAACE,QAAQ,CAAE;IAAA,EACvD,IAAI;IAEV,IAAIH,aAAa,IAAIA,aAAa,CAACI,eAAe,EAAE;MAChD,IAAI,CAACC,OAAO,GAAGL,aAAa;MAC5B,IAAI,CAACF,WAAW,GAAG,IAAI;MACvB,IAAI,CAACC,cAAc,GAAG,IAAI;;EAElC;EAEAF,mBAAA,CAAAS,SAAA,CAAAC,WAAW,GAAX,UAAYC,MAAc;IACtB,IAAI,CAAC,IAAI,CAACV,WAAW,IAAI,CAAC,IAAI,CAACO,OAAO,EAAE;MACpC,MAAM,IAAII,KAAK,CAAC,iDAAiD,CAAC;;IAEtE,IAAMC,GAAG,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;IAClC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACF,MAAM,EAAEI,CAAC,IAAIhB,KAAK,EAAE;MACxC,IAAI,CAACS,OAAO,CAACD,eAAe,CAACM,GAAG,CAACG,QAAQ,CAACD,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACL,GAAG,CAACF,MAAM,GAAGI,CAAC,EAAEhB,KAAK,CAAC,CAAC,CAAC;;IAEtF,OAAOc,GAAG;EACd,CAAC;EACL,OAAAb,mBAAC;AAAD,CAAC,CA5BD;AAAamB,OAAA,CAAAnB,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}