{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n    next(done => {\n      const {\n        error\n      } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n    _defineProperty(this, \"isTorus\", void 0);\n    _defineProperty(this, \"_rpcEngine\", void 0);\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n}\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    var _this$window;\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"windowRefs\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    } // Add to collection only if window is opened\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n}\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"selectedAddress\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n      this._handleChainChanged({\n        chainId\n      });\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst {\n  version\n} = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"isInitialized\", void 0);\n    _defineProperty(this, \"torusAlert\", void 0);\n    _defineProperty(this, \"modalZIndex\", void 0);\n    _defineProperty(this, \"alertZIndex\", void 0);\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"communicationProvider\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"isTopupHidden\", false);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    _defineProperty(this, \"styleLink\", void 0);\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {},\n      whiteLabel\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(\"Solana Embed Version :\".concat(version));\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel !== null && whiteLabel !== void 0 && whiteLabel.topupHide) this.isTopupHidden = whiteLabel.topupHide;else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n    await documentReady();\n    await handleSetup();\n  }\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  } // support sendOptions\n\n  async signAndSendTransaction(transaction, options) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\"),\n        options\n      }\n    });\n    return {\n      signature: response\n    };\n  }\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message: transaction.serializeMessage().toString(\"hex\"),\n        messageOnly: true\n      }\n    }); // reconstruct signature pair\n\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n  async signAllTransactions(transactions) {\n    const encodedMessage = transactions.map(tx => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true\n      }\n    }); // reconstruct signature pairs\n\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n        }); // for communication methods sending window id in jrpc req params\n\n        _payload.params.windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"names":["messages","errors","disconnected","permanentlyDisconnected","unsupportedSync","method","concat","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","configuration","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","location","hostname","log","loglevel","getLogger","createErrorMiddleware","req","res","next","error","ethErrors","rpc","invalidRequest","message","data","done","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","_ref","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","BaseProvider","SafeEventEmitter","constructor","connectionStream","jsonRpcStreamName","_defineProperty","duplex","Error","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","createLoggerMiddleware","origin","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","getRpcPromiseCallback","send","payload","callback","streamName","handleEvent","handle","eventName","handler","_len","arguments","handlerArgs","_key","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","_this$window","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_objectSpread$2","_defaultState","dappStorageKey","languageTranslations","embedTranslations","windowRefs","on","isConnected","notificationHandler","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","initialized","_handleWindow","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","torusWidgetVisibility","buttonPosition","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","_objectSpread$1","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","accounts","isUnlocked","PROVIDER_JRPC_METHODS","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","version","require","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","login","loginProvider","provider","login_hint","loginWithPrivateKey","loginParams","privateKey","userInfo","success","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","_objectSpread","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","getAccounts","response","sendTransaction","transaction","serialize","requireAllSignatures","signAndSendTransaction","options","signature","signTransaction","serializeMessage","messageOnly","parsed","JSON","parse","publicKey","PublicKey","Buffer","addSignature","signAllTransactions","transactions","encodedMessage","map","tx","responses","signatures","item","idx","signMessage","getGaslessPublicKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all"],"sources":["C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\messages.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\interfaces.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\config.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\loglevel.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\utils.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\baseProvider.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\embedUtils.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\PopupHandler.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\communicationProvider.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\inPageProvider.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\siteMetadata.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\solana-embed\\src\\embed.ts"],"sourcesContent":["export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n                whiteLabel,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: Transaction, options?: SendOptions): Promise<{ signature: string }> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\"), options },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}