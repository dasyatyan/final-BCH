{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { setAPIKey, setEmbedHost, post } from '@toruslabs/http-helpers';\nimport stringify from 'json-stable-stringify';\nimport { ec as ec$1 } from 'elliptic';\nimport createKeccakHash from 'keccak';\nimport { encrypt, getPublic, decrypt } from '@toruslabs/eccrypto';\nfunction keccak256(a) {\n  return createKeccakHash(\"keccak256\").update(a).digest();\n}\nconst ec = new ec$1(\"secp256k1\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass MetadataStorageLayer {\n  // ms\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _defineProperty(this, \"metadataHost\", void 0);\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n  generateMetadataParams(message, privateKeyHex) {\n    var _ref, _sig$recoveryParam;\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(stringify(setData)));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from((_ref = sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2))) !== null && _ref !== void 0 ? _ref : \"00\", \"hex\").toString(\"base64\")\n    };\n  }\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\")\n    };\n  }\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/set\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/get\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n}\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16),\n    pub_key_Y: pubKey.getY().toString(16)\n  }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\nexport { decryptData, MetadataStorageLayer as default, ec, encParamsBufToHex, encParamsHexToBuf, encryptAndSetData, encryptData, getAndDecryptData, getDeviceShare, getTorusShare, keccak256, setDeviceShare, setTorusShare };","map":{"version":3,"names":["keccak256","a","createKeccakHash","update","digest","ec","ec$1","MetadataStorageLayer","constructor","metadataHost","arguments","length","undefined","serverTimeOffset","_defineProperty","setAPIKey","apiKey","setEmbedHost","embedHost","generateMetadataParams","message","privateKeyHex","_ref","_sig$recoveryParam","key","keyFromPrivate","setData","data","timestamp","Math","floor","Date","now","toString","sig","sign","stringify","pub_key_X","getPublic","getX","pub_key_Y","getY","set_data","signature","Buffer","from","r","s","recoveryParam","padStart","slice","generatePubKeyParams","setMetadata","namespace","options","params","_objectSpread","metadataResponse","post","concat","useAPIKey","getMetadata","pubKey","WEBAUTHN_TORUS_SHARE","WEBAUTHN_DEVICE_SHARE","encParamsHexToBuf","encParamsHex","iv","ephemPublicKey","ciphertext","mac","encParamsBufToHex","encParams","encryptData","privKeyHex","d","serializedDec","JSON","serializedBuf","encrypt","sData","decryptData","parse","keyPair","decrypt","getPrivate","getAndDecryptData","m","serializedData","encryptAndSetData","metadataParams","setTorusShare","webAuthnPubKey","webAuthnRefHex","subspace","subspaceData","refKeyPair","privKey","keyFromPublic","x","y","serializedSubspaceData","serializedSubspaceDataBuf","encSubspaceData","encSubspaceDataHex","setDeviceShare","getTorusShare","webAuthnKeyHex","getDeviceShare"],"sources":["C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\metadata-helpers\\src\\utils.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\metadata-helpers\\src\\MetadataStorageLayer.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\metadata-helpers\\src\\webAuthnShareResolver.ts"],"sourcesContent":["import { ec as EC } from \"elliptic\";\nimport createKeccakHash from \"keccak\";\n\nexport function keccak256(a: string | Buffer): Buffer {\n  return createKeccakHash(\"keccak256\").update(a).digest();\n}\n\nexport const ec = new EC(\"secp256k1\");\n","import { post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport stringify from \"json-stable-stringify\";\n\nimport { ec, keccak256 } from \"./utils\";\n\nexport type PubKeyParams = {\n  pub_key_X: string;\n  pub_key_Y: string;\n};\n\nexport type MetadataParams = PubKeyParams & {\n  set_data: {\n    data: string;\n    timestamp: string;\n  };\n  signature: string;\n};\n\nclass MetadataStorageLayer {\n  public metadataHost: string;\n\n  public serverTimeOffset: number; // ms\n\n  constructor(metadataHost = \"https://metadata.tor.us\", serverTimeOffset = 0) {\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  generateMetadataParams(message: string, privateKeyHex: string): MetadataParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(\n        sig.r.toString(16, 64) + sig.s.toString(16, 64) + sig.recoveryParam?.toString(16).padStart(2, \"0\").slice(-2) ?? \"00\",\n        \"hex\"\n      ).toString(\"base64\"),\n    };\n  }\n\n  generatePubKeyParams(privateKeyHex: string): PubKeyParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...data, namespace } : data;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n\n  async getMetadata(pubKey: PubKeyParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...pubKey, namespace } : pubKey;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/get`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n}\n\nexport default MetadataStorageLayer;\n","import { decrypt, Ecies, encrypt, getPublic } from \"@toruslabs/eccrypto\";\n\nimport MetadataStorageLayer, { PubKeyParams } from \"./MetadataStorageLayer\";\nimport { ec } from \"./utils\";\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\n\nexport type EciesHex = {\n  iv: string;\n  ephemPublicKey: string;\n  ciphertext: string;\n  mac: string;\n};\n\nexport function encParamsHexToBuf(encParamsHex: EciesHex): Ecies {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\"),\n  };\n}\n\nexport function encParamsBufToHex(encParams: Ecies): EciesHex {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n  };\n}\n\nexport async function encryptData(privKeyHex: string, d: unknown): Promise<string> {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\n\nexport async function decryptData<T>(privKeyHex: string, d: string): Promise<T> {\n  const encParamsHex: EciesHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data: T = JSON.parse(serializedDec);\n  return data;\n}\n\nexport async function getAndDecryptData<T>(m: MetadataStorageLayer, privKeyHex: string, namespace: string): Promise<Record<string, T> | null> {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({ pub_key_X: pubKey.getX().toString(16), pub_key_Y: pubKey.getY().toString(16) }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData<T>(privKeyHex, serializedData);\n  return data as Record<string, T>;\n}\n\nexport async function encryptAndSetData(m: MetadataStorageLayer, privKeyHex: string, d: Record<string, unknown>, namespace: string): Promise<void> {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\n\nexport async function setTorusShare(\n  m: MetadataStorageLayer,\n  webAuthnPubKey: PubKeyParams,\n  webAuthnRefHex: string,\n  subspace: string,\n  subspaceData: unknown\n): Promise<void> {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y,\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\n\nexport async function setDeviceShare(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string, subspaceData: unknown): Promise<void> {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\n\nexport async function getTorusShare<T>(m: MetadataStorageLayer, webAuthnKeyHex: string, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<EciesHex>(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\n\nexport async function getDeviceShare<T>(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<T>(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n"],"mappings":";;;;;;AAGM,SAAUA,SAAVA,CAAoBC,CAApB,EAAsC;EAC1C,OAAOC,gBAAgB,CAAC,WAAD,CAAhB,CAA8BC,MAA9B,CAAqCF,CAArC,CAAwC,CAAAG,MAAxC,EAAP;AACD;MAEYC,EAAE,GAAG,IAAIC,IAAJ,CAAO,WAAP;;;;;;;;;;;;;;;;;;;;;;ACWlB,MAAMC,oBAAN,CAA0B;EAGS;EAEjCC,YAAA,EAA0E;IAAA,IAA9DC,YAA8D,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA/C,yBAA+C;IAAA,IAApBG,gBAAoB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAD,CAAC;IAAAI,eAAA;IAAAA,eAAA;IACxE,IAAK,CAAAL,YAAL,GAAoBA,YAApB;IACA,IAAK,CAAAI,gBAAL,GAAwBA,gBAAxB;EACD;EAEe,OAATE,SAASA,CAACC,MAAD,EAAe;IAC7BD,SAAS,CAACC,MAAD,CAAT;EACD;EAEkB,OAAZC,YAAYA,CAACC,SAAD,EAAkB;IACnCD,YAAY,CAACC,SAAD,CAAZ;EACD;EAEDC,sBAAsBA,CAACC,OAAD,EAAkBC,aAAlB,EAAuC;IAAA,IAAAC,IAAA,EAAAC,kBAAA;IAC3D,MAAMC,GAAG,GAAGnB,EAAE,CAACoB,cAAH,CAAkBJ,aAAlB,EAAiC,KAAjC,CAAZ;IACA,MAAMK,OAAO,GAAG;MACdC,IAAI,EAAEP,OADQ;MAEdQ,SAAS,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKjB,gBAAL,GAAwBkB,IAAI,CAACC,GAAL,EAAa,OAAhD,CAAsD,CAAAC,QAAtD,CAA+D,EAA/D;KAFb;IAIA,MAAMC,GAAG,GAAGV,GAAG,CAACW,IAAJ,CAASnC,SAAS,CAACoC,SAAS,CAACV,OAAD,CAAV,CAAlB,CAAZ;IACA,OAAO;MACLW,SAAS,EAAEb,GAAG,CAACc,SAAJ,GAAgBC,IAAhB,EAAuB,CAAAN,QAAvB,CAAgC,KAAhC,CADN;MAELO,SAAS,EAAEhB,GAAG,CAACc,SAAJ,GAAgBG,IAAhB,EAAuB,CAAAR,QAAvB,CAAgC,KAAhC,CAFN;MAGLS,QAAQ,EAAEhB,OAHL;MAILiB,SAAS,EAAEC,MAAM,CAACC,IAAP,EAAAvB,IAAA,GACTY,GAAG,CAACY,CAAJ,CAAMb,QAAN,CAAe,EAAf,EAAmB,EAAnB,IAAyBC,GAAG,CAACa,CAAJ,CAAMd,QAAN,CAAe,EAAf,EAAmB,EAAnB,CAAzB,IAAkD,CAAAV,kBAAA,GAAAW,GAAG,CAACc,aAAtD,cAAAzB,kBAAA,uBAAkDA,kBAAmB,CAAAU,QAAnB,CAA4B,EAA5B,EAAgCgB,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,EAAiDC,KAAjD,CAAuD,CAAC,CAAxD,CAAlD,CADS,cAAA5B,IAAA,cAAAA,IAAA,GACuG,IADvG,EAET,KAFS,EAGTW,QAHS,CAGA,QAHA;KAJb;EASD;EAEDkB,oBAAoBA,CAAC9B,aAAD,EAAsB;IACxC,MAAMG,GAAG,GAAGnB,EAAE,CAACoB,cAAH,CAAkBJ,aAAlB,EAAiC,KAAjC,CAAZ;IACA,OAAO;MACLgB,SAAS,EAAEb,GAAG,CAACc,SAAJ,GAAgBC,IAAhB,EAAuB,CAAAN,QAAvB,CAAgC,KAAhC,CADN;MAELO,SAAS,EAAEhB,GAAG,CAACc,SAAJ,GAAgBG,IAAhB,GAAuBR,QAAvB,CAAgC,KAAhC;KAFb;EAID;EAEgB,MAAXmB,WAAWA,CAACzB,IAAD,EAAuB0B,SAAvB,EAAiDC,OAAjD,EAAsE;IACrF,MAAMC,MAAM,GAAGF,SAAS,KAAK,IAAd,GAAAG,aAAA,CAAAA,aAAA,KAA0B7B,IAA1B;MAAgC0B;IAAhC,KAA8C1B,IAA7D;IACA,MAAM8B,gBAAgB,GAAG,MAAMC,IAAI,IAAAC,MAAA,CAAyB,IAAK,CAAAlD,YAA9B,EAAkD,SAAA8C,MAAlD,EAA0DD,OAA1D,EAAmE;MAAEM,SAAS,EAAE;IAAb,CAAnE,CAAnC;IACA,OAAOH,gBAAgB,CAACrC,OAAxB;EACD;EAEgB,MAAXyC,WAAWA,CAACC,MAAD,EAAuBT,SAAvB,EAAiDC,OAAjD,EAAsE;IACrF,MAAMC,MAAM,GAAGF,SAAS,KAAK,IAAd,GAAAG,aAAA,CAAAA,aAAA,KAA0BM,MAA1B;MAAkCT;IAAlC,KAAgDS,MAA/D;IACA,MAAML,gBAAgB,GAAG,MAAMC,IAAI,IAAAC,MAAA,CAAyB,IAAK,CAAAlD,YAA9B,EAAkD,SAAA8C,MAAlD,EAA0DD,OAA1D,EAAmE;MAAEM,SAAS,EAAE;IAAb,CAAnE,CAAnC;IACA,OAAOH,gBAAgB,CAACrC,OAAxB;EACD;AAtDuB;ACb1B,MAAM2C,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AASM,SAAUC,iBAAVA,CAA4BC,YAA5B,EAAkD;EACtD,OAAO;IACLC,EAAE,EAAEvB,MAAM,CAACC,IAAP,CAAYqB,YAAY,CAACC,EAAzB,EAA6B,KAA7B,CADC;IAELC,cAAc,EAAExB,MAAM,CAACC,IAAP,CAAYqB,YAAY,CAACE,cAAzB,EAAyC,KAAzC,CAFX;IAGLC,UAAU,EAAEzB,MAAM,CAACC,IAAP,CAAYqB,YAAY,CAACG,UAAzB,EAAqC,KAArC,CAHP;IAILC,GAAG,EAAE1B,MAAM,CAACC,IAAP,CAAYqB,YAAY,CAACI,GAAzB,EAA8B,KAA9B;GAJP;AAMD;AAEK,SAAUC,iBAAVA,CAA4BC,SAA5B,EAA4C;EAChD,OAAO;IACLL,EAAE,EAAEvB,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAACL,EAAtB,CAA0B,CAAAlC,QAA1B,CAAmC,KAAnC,CADC;IAELmC,cAAc,EAAExB,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAACJ,cAAtB,CAAsC,CAAAnC,QAAtC,CAA+C,KAA/C,CAFX;IAGLoC,UAAU,EAAEzB,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAACH,UAAtB,CAAkC,CAAApC,QAAlC,CAA2C,KAA3C,CAHP;IAILqC,GAAG,EAAE1B,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAACF,GAAtB,EAA2BrC,QAA3B,CAAoC,KAApC;GAJP;AAMD;AAEM,eAAewC,WAAfA,CAA2BC,UAA3B,EAA+CC,CAA/C,EAAyD;EAC9D,MAAMC,aAAa,GAAGC,IAAI,CAACzC,SAAL,CAAeuC,CAAf,CAAtB;EACA,MAAMG,aAAa,GAAGlC,MAAM,CAACC,IAAP,CAAY+B,aAAZ,EAA2B,OAA3B,CAAtB;EACA,MAAMJ,SAAS,GAAG,MAAMO,OAAO,CAACzC,SAAS,CAACM,MAAM,CAACC,IAAP,CAAY6B,UAAZ,EAAwB,KAAxB,CAAD,CAAV,EAA4CI,aAA5C,CAA/B;EACA,MAAMZ,YAAY,GAAGK,iBAAiB,CAACC,SAAD,CAAtC;EACA,MAAMQ,KAAK,GAAGH,IAAI,CAACzC,SAAL,CAAe8B,YAAf,CAAd;EACA,OAAOc,KAAP;AACD;AAEM,eAAeC,WAAfA,CAA8BP,UAA9B,EAAkDC,CAAlD,EAA2D;EAChE,MAAMT,YAAY,GAAaW,IAAI,CAACK,KAAL,CAAWP,CAAX,CAA/B;EACA,MAAMH,SAAS,GAAGP,iBAAiB,CAACC,YAAD,CAAnC;EACA,MAAMiB,OAAO,GAAG9E,EAAE,CAACoB,cAAH,CAAkBiD,UAAlB,CAAhB;EACA,MAAMI,aAAa,GAAG,MAAMM,OAAO,CAACxC,MAAM,CAACC,IAAP,CAAYsC,OAAO,CAACE,UAAR,GAAqBpD,QAArB,CAA8B,KAA9B,EAAqC,EAArC,CAAZ,EAAsD,KAAtD,CAAD,EAA+DuC,SAA/D,CAAnC;EACA,MAAMI,aAAa,GAAGE,aAAa,CAAC7C,QAAd,CAAuB,OAAvB,CAAtB;EACA,MAAMN,IAAI,GAAMkD,IAAI,CAACK,KAAL,CAAWN,aAAX,CAAhB;EACA,OAAOjD,IAAP;AACD;AAEM,eAAe2D,iBAAfA,CAAoCC,CAApC,EAA6Db,UAA7D,EAAiFrB,SAAjF,EAAkG;EACvG,MAAM8B,OAAO,GAAG9E,EAAE,CAACoB,cAAH,CAAkBiD,UAAlB,CAAhB;EACA,MAAMZ,MAAM,GAAGqB,OAAO,CAAC7C,SAAR,EAAf;EACA,MAAMkD,cAAc,GAAG,MAAMD,CAAC,CAAC1B,WAAF,CAAc;IAAExB,SAAS,EAAEyB,MAAM,CAACvB,IAAP,GAAcN,QAAd,CAAuB,EAAvB,CAAb;IAAyCO,SAAS,EAAEsB,MAAM,CAACrB,IAAP,EAAc,CAAAR,QAAd,CAAuB,EAAvB;GAAlE,EAAgGoB,SAAhG,CAA7B;EACA,IAAI,CAACmC,cAAL,EAAqB;IACnB,OAAO,IAAP;EACD;EACD,MAAM7D,IAAI,GAAG,MAAMsD,WAAW,CAAIP,UAAJ,EAAgBc,cAAhB,CAA9B;EACA,OAAO7D,IAAP;AACD;AAEM,eAAe8D,iBAAfA,CAAiCF,CAAjC,EAA0Db,UAA1D,EAA8EC,CAA9E,EAA0GtB,SAA1G,EAA2H;EAChI,MAAM2B,KAAK,GAAG,MAAMP,WAAW,CAACC,UAAD,EAAaC,CAAb,CAA/B;EACA,MAAMe,cAAc,GAAGH,CAAC,CAACpE,sBAAF,CAAyB6D,KAAzB,EAAgCN,UAAhC,CAAvB;EACA,MAAMa,CAAC,CAACnC,WAAF,CAAcsC,cAAd,EAA8BrC,SAA9B,CAAN;AACD;AAEM,eAAesC,aAAfA,CACLJ,CADK,EAELK,cAFK,EAGLC,cAHK,EAILC,QAJK,EAKLC,YALK,EAKgB;EAErB,MAAMC,UAAU,GAAG3F,EAAE,CAACoB,cAAH,CAAkBoE,cAAlB,CAAnB;EACA,MAAMI,OAAO,GAAGD,UAAU,CAACX,UAAX,EAAhB;EACA,MAAMvB,MAAM,GAAGzD,EAAE,CAAC6F,aAAH,CAAiB;IAC9BC,CAAC,EAAEP,cAAc,CAACvD,SADY;IAE9B+D,CAAC,EAAER,cAAc,CAACpD;EAFY,CAAjB,CAAf;EAIA,MAAMb,IAAI,GAAG,MAAM2D,iBAAiB,CAACC,CAAD,EAAIM,cAAJ,EAAoB9B,oBAApB,CAApC;EACA,IAAIY,CAAC,GAA4B,EAAjC;EACA,IAAIhD,IAAJ,EAAUgD,CAAC,GAAGhD,IAAJ;EACV,MAAM0E,sBAAsB,GAAGxB,IAAI,CAACzC,SAAL,CAAe2D,YAAf,CAA/B;EACA,MAAMO,yBAAyB,GAAG1D,MAAM,CAACC,IAAP,CAAYwD,sBAAZ,EAAoC,OAApC,CAAlC;EACA,MAAME,eAAe,GAAG,MAAMxB,OAAO,CAACnC,MAAM,CAACC,IAAP,CAAYiB,MAAM,CAACxB,SAAP,CAAiB,KAAjB,CAAZ,EAAqC,KAArC,CAAD,EAA8CgE,yBAA9C,CAArC;EACA,MAAME,kBAAkB,GAAGjC,iBAAiB,CAACgC,eAAD,CAA5C;EACA5B,CAAC,CAACmB,QAAD,CAAD,GAAcU,kBAAd;EACA,MAAMf,iBAAiB,CAACF,CAAD,EAAIU,OAAO,CAAChE,QAAR,CAAiB,KAAjB,EAAwB,EAAxB,CAAJ,EAAiC0C,CAAjC,EAAoCZ,oBAApC,CAAvB;AACD;AAEM,eAAe0C,cAAfA,CAA8BlB,CAA9B,EAAuDM,cAAvD,EAA+EC,QAA/E,EAAiGC,YAAjG,EAAsH;EAC3H,MAAMZ,OAAO,GAAG9E,EAAE,CAACoB,cAAH,CAAkBoE,cAAlB,CAAhB;EACA,MAAMI,OAAO,GAAGd,OAAO,CAACE,UAAR,EAAhB;EACA,MAAM1D,IAAI,GAAG,MAAM2D,iBAAiB,CAACC,CAAD,EAAIM,cAAJ,EAAoB7B,qBAApB,CAApC;EACA,IAAIW,CAAC,GAA4B,EAAjC;EACA,IAAIhD,IAAJ,EAAUgD,CAAC,GAAGhD,IAAJ;EACVgD,CAAC,CAACmB,QAAD,CAAD,GAAcC,YAAd;EACA,MAAMN,iBAAiB,CAACF,CAAD,EAAIU,OAAO,CAAChE,QAAR,CAAiB,KAAjB,EAAwB,EAAxB,CAAJ,EAAiC0C,CAAjC,EAAoCX,qBAApC,CAAvB;AACD;AAEM,eAAe0C,aAAfA,CAAgCnB,CAAhC,EAAyDoB,cAAzD,EAAiFd,cAAjF,EAAyGC,QAAzG,EAAyH;EAC9H,MAAMnE,IAAI,GAAG,MAAM2D,iBAAiB,CAAWC,CAAX,EAAcM,cAAd,EAA8B9B,oBAA9B,CAApC;EACA,IAAI,CAACpC,IAAL,EAAW,OAAO,IAAP;EACX,MAAMuC,YAAY,GAAGvC,IAAI,CAACmE,QAAD,CAAzB;EACA,IAAI,CAAC5B,YAAL,EAAmB,OAAO,IAAP;EACnB,MAAMM,SAAS,GAAGP,iBAAiB,CAACC,YAAD,CAAnC;EACA,MAAMiB,OAAO,GAAG9E,EAAE,CAACoB,cAAH,CAAkBkF,cAAlB,CAAhB;EACA,MAAMV,OAAO,GAAGd,OAAO,CAACE,UAAR,EAAhB;EACA,MAAMiB,yBAAyB,GAAG,MAAMlB,OAAO,CAACxC,MAAM,CAACC,IAAP,CAAYoD,OAAO,CAAChE,QAAR,CAAiB,KAAjB,EAAwB,EAAxB,CAAZ,EAAyC,KAAzC,CAAD,EAAkDuC,SAAlD,CAA/C;EACA,MAAM6B,sBAAsB,GAAGC,yBAAyB,CAACrE,QAA1B,CAAmC,OAAnC,CAA/B;EACA,MAAM8D,YAAY,GAAGlB,IAAI,CAACK,KAAL,CAAWmB,sBAAX,CAArB;EACA,OAAON,YAAP;AACD;AAEM,eAAea,cAAfA,CAAiCrB,CAAjC,EAA0DM,cAA1D,EAAkFC,QAAlF,EAAkG;EACvG,MAAMnE,IAAI,GAAG,MAAM2D,iBAAiB,CAAIC,CAAJ,EAAOM,cAAP,EAAuB7B,qBAAvB,CAApC;EACA,IAAIrC,IAAJ,EAAU,OAAOA,IAAI,CAACmE,QAAD,CAAX;EACV,OAAO,IAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}