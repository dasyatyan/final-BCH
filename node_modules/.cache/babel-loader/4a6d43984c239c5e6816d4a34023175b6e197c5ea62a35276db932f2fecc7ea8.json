{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread$1({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"names":["noop","undefined","SYN","ACK","BRK","BasePostMessageStream","Duplex","constructor","_ref","name","target","targetWindow","window","targetOrigin","objectMode","_defineProperty","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","SafeEventEmitter","EventEmitter","type","doError","events","_events","error","_len","arguments","_key","er","concat","len","listeners","SerializableError","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","done","createStreamMiddleware","idMap","readNoop","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","randomId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","_runReturnHandlers","_checkForCompletion","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_objectSpread$1","_processRequest","_error","mergeMiddleware","engine","forEach","createEngineStream","opts","on","Substream","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_objectSpread","_substreams","createStream","substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","PostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"sources":["C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\basePostMessageStream.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\safeEventEmitter.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\serializableError.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\jrpc.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\jrpcEngine.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\substream.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\mux.ts","C:\\Users\\user\\Desktop\\BCEndterm\\node_modules\\@toruslabs\\openlogin-jrpc\\src\\postMessageStream.ts"],"sourcesContent":["import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: unknown, _, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","import { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { randomId } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport type Json = boolean | number | string | null | { [property: string]: Json } | Json[];\n\nexport type JRPCVersion = \"2.0\";\nexport type JRPCId = number | string | void;\n\nexport type ConsoleLike = Pick<Console, \"log\" | \"warn\" | \"error\" | \"debug\" | \"info\" | \"trace\">;\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: any) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport type JRPCEngineNextCallback = (cb?: (done: (error?: Error) => void) => void) => void;\nexport type JRPCEngineEndCallback = (error?: Error) => void;\nexport type JRPCEngineReturnHandler = (done: (error?: Error) => void) => void;\n\ninterface IdMapValue {\n  req: JRPCRequest<unknown>;\n  res: JRPCResponse<unknown>;\n  next: JRPCEngineNextCallback;\n  end: JRPCEngineEndCallback;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\nexport type JRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: JRPCResponse<U>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({ code: -32603, message: error.message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\ntype ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport type AsyncJRPCEngineNextCallback = () => Promise<void>;\n\ntype Maybe<T> = Partial<T> | null | undefined;\n\nexport interface JRPCSuccess<T> extends JRPCBase {\n  result: Maybe<T>;\n}\n\nexport interface JRPCError {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n}\n\nexport interface PendingJRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: Error | JRPCError;\n}\n\nexport interface JRPCFailure extends JRPCBase {\n  error: JRPCError;\n}\n\nexport type AsyncJRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: PendingJRPCResponse<U>, next: AsyncJRPCEngineNextCallback) => Promise<void>;\n\ntype ReturnHandlerCallback = (error: null | Error) => void;\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import { serializeError } from \"eth-rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCEngineReturnHandler, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"./jrpc\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[]\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","import BasePostMessageStream from \"./basePostMessageStream\";\n\nexport default class PostMessageStream extends BasePostMessageStream {\n  _postMessage(data: unknown): void {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data as Record<string, unknown>;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data as Record<string, unknown>;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0] as Record<string, unknown>;\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin as string;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}